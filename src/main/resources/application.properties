server.port=8888
spring.datasource.url=jdbc:mysql://localhost:3306/School?createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

#update - During application startup doesn't drop the existing schema. Adds additional columns, data, other changes if added
#Best for development, allows you to add fields/entities quickly
spring.jpa.hibernate.ddl-auto=update

spring.jpa.show-sql=true
spring.jackson.serialization.fail-on-empty-beans=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect

spring.jpa.properties.hibernate.current_session_context_class=org.springframework.orm.hibernate5.SpringSessionContext
hibernate.allow_update_outside_transaction=true


# Actuator props
management.endpoint.health.enabled=true
management.endpoints.web.exposure.include=health, metrics

# HikariCP settings

# Setting the minimum idle connections to 5. Hikari maintains atleast 5 connections to be ready for new requests
# If the number lowers to less than 5 then hikari cp creates new connections
spring.datasource.hikari.minimum-idle=5

# Example: Setting maximum pool size to 10. So the total number of connections is 10.
spring.datasource.hikari.maximum-pool-size=10

# The connection-timeout parameter specifies how long (in milliseconds) the application should wait
# when requesting a connection from the pool before throwing an exception.
spring.datasource.hikari.connection-timeout=30000

#The idle-timeout parameter determines how long a connection can remain idle in the pool before HikariCP closes it.
# This setting is useful for releasing unused connections back to the database during low-traffic periods.
spring.datasource.hikari.idle-timeout=600000

#The max-lifetime parameter defines the maximum amount of time a connection can remain in the pool, regardless of activity.
# Connections that exceed this time will be closed and replaced.
spring.datasource.hikari.max-lifetime=1800000


